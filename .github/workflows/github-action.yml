name: Terraform Action

on:
  push:
    branches:
      - main
  pull_request:
permissions:
     id-token: write # This is required for aws oidc connection
     contents: read # This is required for actions/checkout
     pull-requests: write # This is required for gh bot to comment PR

jobs:
  deploy:
  terraform:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        tf_version: [3.0.0]  # Add additional versions if needed

    env:
      TF_VAR_tf_backend_bucket: ${{ secrets.TF_BACKEND_BUCKET }}
      TF_VAR_tf_backend_key: ${{ secrets.TF_BACKEND_KEY }}
      TF_VAR_tf_backend_region: ${{ secrets.TF_BACKEND_REGION }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ matrix.tf_version }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        role-session-name: Terraform_statefile_gitbubpolicy
        aws-region: ${{ secrets.TF_BACKEND_REGION }}

    - name: Initialize Terraform
      run: |
        terraform init -backend-config="bucket=${TF_VAR_tf_backend_bucket}" -backend-config="key=${TF_VAR_tf_backend_key}" -backend-config="region=${TF_VAR_tf_backend_region}"
        
#       terraform init -backend-config="access_key=${TF_VAR_aws_access_key}" -backend-config="secret_key=${TF_VAR_aws_secret_key}" -backend-config="bucket=${TF_VAR_tf_backend_bucket}" -backend-config="key=${TF_VAR_tf_backend_key}" -backend-config="region=${TF_VAR_tf_backend_region}"

    - name: Validate Terraform
      run: terraform validate

    - name: Plan Terraform
      run: terraform plan -out=tfplan
      if: github.event_name == 'pull_request'
      continue-on-error: true

    -  uses: actions/github-script@v6
       if: github.event_name == 'pull_request'
       env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
       with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

    -   name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1


    - name: Apply Terraform
      if: github.event_name == 'push'
      run: terraform apply -auto-approve tfplan
