name: Terraform Apply

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

jobs:
  terraform:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        tf_version: [0.15.0]  # Add additional versions if needed

    env:
      AWS_REGION: ${{ secrets.TF_BACKEND_REGION }}
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE }}
      TF_VAR_tf_backend_bucket: ${{ secrets.TF_BACKEND_BUCKET }}
      TF_VAR_tf_backend_key: ${{ secrets.TF_BACKEND_KEY }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ matrix.tf_version }}

    - name: Assume AWS Role
      id: assume-role
      run: |
        role_credentials=$(aws sts assume-role --role-arn "$AWS_ROLE_ARN" --role-session-name "Terraform_statefile_gitbubpolicy" --output json)
        echo "::set-output name=AWS_ACCESS_KEY_ID::$(echo "$role_credentials" | jq -r .Credentials.AccessKeyId)"
        echo "::set-output name=AWS_SECRET_ACCESS_KEY::$(echo "$role_credentials" | jq -r .Credentials.SecretAccessKey)"
        echo "::set-output name=AWS_SESSION_TOKEN::$(echo "$role_credentials" | jq -r .Credentials.SessionToken)"

    - name: Configure AWS credentials
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ steps.assume-role.outputs.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ steps.assume-role.outputs.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=${{ steps.assume-role.outputs.AWS_SESSION_TOKEN }}" >> $GITHUB_ENV
        aws configure set aws_access_key_id "${{ steps.assume-role.outputs.AWS_ACCESS_KEY_ID }}"
        aws configure set aws_secret_access_key "${{ steps.assume-role.outputs.AWS_SECRET_ACCESS_KEY }}"
        aws configure set aws_session_token "${{ steps.assume-role.outputs.AWS_SESSION_TOKEN }}"
        aws configure set region "${AWS_REGION}"

    - name: Initialize Terraform
      run: |
        terraform init -backend-config="bucket=${TF_VAR_tf_backend_bucket}" -backend-config="key=${TF_VAR_tf_backend_key}" -backend-config="region=${AWS_REGION}"

    - name: Validate Terraform
      run: terraform validate

    - name: Plan Terraform
      run: terraform plan -out=tfplan
      continue-on-error: true

    - name: Apply Terraform
      if: github.event_name == 'push'
      run: terraform apply -auto-approve tfplan
